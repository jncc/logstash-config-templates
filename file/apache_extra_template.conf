input {
  file {
    path => "${FILE_LOG_PATH}"
    start_position => beginning
    sincedb_path => "${SINCEDB_PATH}"
    add_field => ["split_querystring", "${LOGSTASH_SPLIT_QUERYSTRING}"]
    add_field => ["query_aggregate_ogc_layers", "${LOGSTASH_QUERY_AGGREGATE_OGC_LAYERS}"]
  }
}

filter {
  grok {
    match => {
      "message" => "%{IPORHOST:clientip} %{USER:remote_logname} %{USER:remote_user} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request_original}(?: HTTP/%{NUMBER:http_version})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes_recieved}|-) (?:%{NUMBER:bytes_sent}|-) %{QS:referrer} %{QS:user_agent}"
    }
  }

  if [rawrequest] {
    mutate {
      lowercase => "rawrequest"
      rename => {
        "rawrequest" => "[request][raw]"
      }
    }
  } else {
    mutate {
      lowercase => "request_original" 
    } 

    grok {
      match => [ 
        "request_original", "%{GREEDYDATA:request_path}\?%{GREEDYDATA:request_query}",
        "request_original", "%{GREEDYDATA:request_path}"
      ]
    }

    mutate {
      remove_field => [
        "request_original"
      ]
      rename => {
        "verb" => "[request][http][verb]"
        "http_version" => "[request][http][version]"
      }
    }
  }

  mutate {
    rename => {
      "request_path" => "[request][original]"
      "clientip" => "[request][ip]"
      "remote_logname" => "[request][remote][logname]"
      "remote_user" => "[request][remote][user]"
      "status" => "[response][http][status]"
      "response_time" => "[response][time]"
      "referer" => "[request][referer]"
      "user_agent" => "[request][user_agent]"
    }
  }

  if [bytes_sent] {
    mutate {
      rename => {
        "bytes_sent" => "[response][size]"
      }
      convert => {
        "[response][size]", "integer"
      }
    }
  }

  if [bytes_recieved] {
    mutate {
      rename => {
        "bytes_recieved" => "[request][size]"
      }
      convert => {
        "[request][size]", "integer"
      }
    }
  }


  if [request_query] {
    mutate {
      rename => {
        "request_query" => "[request][querystring]"
      }
    }
    if [split_querystring] == "yes" {
      kv {
        source => "[request][querystring]"
        field_split => "&?"
        target => "[request][query]"
      }
      urldecode {
        field => "[request][query]"
        all_fields => "true"
      }
      if [query_aggregate_ogc_layers] == "yes" {
        if [request][query][layers] {
          mutate {
            split => { 
              "layers" => "," 
            }
          }
        }        
        if [request][query][layer] {
          mutate {
            add_field => { "layers" => "%{layer}" }
          }
        }
      }
    }
  }

  geoip {
    source => "[request][ip]"
    target => "[request][geoip]"
    database => "${GEOIP_DATABASE_PATH}"
  }

  mutate {
    convert => [ 
      "[request][geoip][coordinates]", "float",
      "[response][time]", "integer"
    ]
  }

  mutate {
    remove_field => [
      "[split_querystring]",
      "[query_aggregate_ogc_layers]",
      "[request][geoip][latitude]",
      "[request][geoip][longitude]"
    ]
  }

  date {
    locale => "en"
    match => ["timestamp", "dd/MMM/YYYY:HH:mm:ss Z"]
  }
}

output {
  elasticsearch {
    hosts => ["${ELASTICSEARCH_CLUSTER_HOST}:${ELASTICSEARCH_CLUSTER_PORT}"]
    index => "${ELASTICSEARCH_INDEX_NAME}-%{+YYYY.MM}"
  }
  stdout {
    codec => rubydebug
  }
}
