input {
  file {
    path => "${FILE_LOG_PATH}"
    start_position => beginning
    sincedb_path => "${SINCEDB_PATH}"
    add_field => ["split_querystring", "${LOGSTASH_SPLIT_QUERYSTRING}"]
  }
}

filter {
  grok {
    match => {
      "message" => "%{IP:ip} %{USER:remote_logname} %{USER:remote_user} %{SYSLOG5424SD:timestamp} \"%{WORD:verb} %{NOTSPACE:request} HTTP/%{NUMBER:http_version}\" %{INT:status} %{INT:response_time} %{NUMBER:bytes_recieved} %{NUMBER:bytes_sent} \"(?<referer>[^\"]+)\" \"(?<user_agent>[^\"]+)\""
    }
  }

  mutate {
    lowercase => "request" 
  } 

  grok {
    match => [ 
      "request", "%{GREEDYDATA:request_path}\?%{GREEDYDATA:request_query}",
      "request", "%{GREEDYDATA:request_path}"
    ]
  }

  mutate {
    remove_field => [
      "request"
    ]
    rename => {
      "request_path" => "[request][original]"
      "clientip" => "[request][ip]"
      "remote_logname" => "[request][remote][logname]"
      "remote_user" => "[request][remote][user]"
      "verb" => "[request][http][verb]"
      "http_version" => "[request][http][version]"
      "status" => "[response][http][status]"
      "response_time" => "[response][time]"
      "bytes_recieved" => "[request][size]"
      "bytes_sent" => "[response][size]"
      "referer" => "[request][referer]"
      "user_agent" => "[request][user_agent]"
    }
  }

  if [request_query] {
    mutate {
      rename => {
        "request_query" => "[request][querystring]"
      }
    }
    if [split_querystring] == "yes" {
      kv {
        source => "[request][querystring]"
        field_split => "&?"
        target => "[request][query]"
      }
      urldecode {
        field => "[request][query]"
        all_fields => "true"
      }
    }
  }


  geoip {
    source => "[request][ip]"
    target => "[request][geoip]"
    database => "${GEOIP_DATABASE_PATH}"
    add_field => [ "[request][geoip][coordinates]", "%{[request][geoip][longitude]}" ]
    add_field => [ "[request][geoip][coordinates]", "%{[request][geoip][latitude]}"  ]
  }

  mutate {
    convert => [ 
      "[request][geoip][coordinates]", "float",
      "[response][size]", "integer",
      "[request][size]", "integer",
      "[response][time]", "integer"
    ]
  }

  date {
    locale => "en"
    match => ["timestamp", "d/MMM/YYYY:HH:mm:ss Z"]
  }

}

output {
  elasticsearch {
    hosts => ["${ELASTICSEARCH_CLUSTER_HOST}:${ELASTICSEARCH_CLUSTER_PORT}"]
    index => "${ELASTICSEARCH_INDEX_NAME}-%{+YYYY.MM}"
  }
  stdout {
    codec => rubydebug
  }
}
