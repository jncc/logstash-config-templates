input {
  file {
    path => "${FILE_LOG_PATH}"
    start_position => beginning
    sincedb_path => "${SINCEDB_PATH}"
    add_field => ["split_querystring", "${LOGSTASH_SPLIT_QUERYSTRING}"]
  }
}

filter {
  grok {
    match => {
      "message" => "%{IP:source_ip} \- \- \[%{HTTPDATE:timestamp}] \"%{WORD:http_verb} %{NOTSPACE:request_original} HTTP/%{NUMBER:http_version}\" %{NUMBER:http_status} (?:-|%{NUMBER:bytes_sent})"
    }
  }
  mutate {
    rename => {
      "source_ip" => "[request][ip]"
      "http_verb" => "[request][http][verb]"
      "http_version" => "[request][http][version]"
      "http_status" => "[response][status]"
      "request_original" => "[request][original]"
      "bytes_sent" => "[response][size]"
    }
  }
  mutate {
    lowercase => "[request][original]"
  } 

  grok {
    match => ["[request][original]", "%{GREEDYDATA:request_path}\?%{GREEDYDATA:request_query}"]
    match => ["[request][original]", "%{GREEDYDATA:request_path}"]
  }

  mutate {
    rename => {
      "request_path" => "[request][path]"
    }
  }

  if [request_query] {
    mutate {
      rename => {
        "request_query" => "[request][querystring]"
      }
    }
    if [split_querystring] == 'yes' {
      kv {
        source => "[request][querystring]"
        field_split => "&?"
        target => "[request][query]"
      }
      urldecode {
        field => "[request][query]"
        all_fields => "true"
      }
    }
  }

  geoip {
    source => "[request][ip]"
    target => "[request][geoip]"
    database => "${GEOIP_DATABASE_PATH}"
    add_field => ["[request][geoip][coordinates]", "%{[request][geoip][longitude]}"]
    add_field => ["[request][geoip][coordinates]", "%{[request][geoip][latitude]}"]
  }

  if [request][query][layer] {
    mutate {
      rename => {
        "[request][query][layer]" => "[request][query][layers]"
      }
    }
  }

  mutate {
    convert => [
      "[request][geoip][coordinates]", "float",
      "[response][size]", "integer"
    ]
    split => {
        "layers" => ","
    }
  }

  date {
    locale => en
    match => ["timestamp", "d/MMM/YYYY:HH:mm:ss Z"]
  }
}

output {
  elasticsearch {
    hosts => ["${ELASTICSEARCH_CLUSTER_HOST}:${ELASTICSEARCH_CLUSTER_PORT}"]
    index => "${ELASTICSEARCH_INDEX_NAME}-%{+YYYY.MM}"
  }
  stdout {
    codec => rubydebug
  }
}
