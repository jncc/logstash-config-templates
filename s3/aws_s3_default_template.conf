input {
  s3 {
    bucket => "${S3_LOG_BUCKET}"
    region => "${S3_REGION}"
    prefix => "${S3_PREFIX}"
    sincedb_path => "${SINCEDB_PATH}"
    temporary_directory => "${S3_TMP_DIRECTORY}"
    backup_to_bucket => "${S3_PROCESSED_BUCKET}"
    delete => "${S3_DELETE_AFTER_PROCESS}"
    add_field => ["split_querystring", "${LOGSTASH_SPLIT_QUERYSTRING}"]
    add_field => ["query_aggregate_ogc_layers", "${LOGSTASH_QUERY_AGGREGATE_OGC_LAYERS}"]
  }
}

filter {
  grok {
    match => { "message" => "%{S3_ACCESS_LOG}"}
  }

  mutate {
    rename => {
      "request" => "[request][original]"
      "clientip" => "[request][ip]"
      "key" => "[request][path]"
      "verb" => "[request][http][verb]"
      "httpversion" => "[request][http][version]"
      "bucket" => "[request][s3][bucket]"
      "owner" => "[request][s3][owner]"
      "requester" => "[request][s3][requester]"
      "request_id" => "[request][s3][request_id]"
      "operation" => "[request][s3][operation]"
    }
  }

  grok {
    match => ["[request][original]", "%{GREEDYDATA:request_path}\?%{GREEDYDATA:request_query}"]
    match => ["[request][original]", "%{GREEDYDATA:request_path}"]
  }  

  if [request_query] {
    mutate {
      rename => {
        "request_query" => "[request][querystring]"
      }
    }
  }

  mutate {
    remove_field => [
      "request_path"
    ]
  }

  if [response] {
    mutate {
      rename => {
        "response" => "[response][status]"
      }
    }
  }

  if [error_code] {
    mutate {
      rename => {
        "error_code" => "[response][s3][error_code]"
      }
    }
  }

  if [bytes] {
    mutate {
      rename => {
        "bytes" => "[response][size]"
      }
      convert => {
        "[response][size]" => "integer"
      }
    }
  }

  if [object_size] {
    mutate {
      rename => {
        "object_size" => "[s3][object_size]"
      }
      convert => {
        "[s3][object_size]" => "integer"
      }
    }
  }

  if [request_time_ms] {
    mutate {
      rename => {
        "request_time_ms" => "[response][time]"
      }
      convert => {
        "[response][time]" => "integer"
      }
    }
  }

  if [turnaround_time_ms] {
    mutate {
      rename => {
        "turnaround_time_ms" => "[s3][turnaround_time_ms]"
      }
      convert => {
        "[response][s3][turnaround_time_ms]" => "integer"
      }
    }
  }

  if [referrer] {
    mutate {
      rename => {
        "referrer" => "[request][referrer]"
      }
      gsub => [
        "[request][referrer]", '"', ""
      ]
    }
  }

  if [agent] {
    mutate {
      rename => {
        "agent" => "[request][user_agent]"
      }
      gsub => [
        "[request][user_agent]", '"', ""
      ]
    }
  }

  if [version_id] {
    mutate {
      rename => {
        "version_id" => "[request][s3][version_id]"  
      }
    }
  }

  if [request_query] {
    mutate {
      rename => {
        "request_query" => "[request][querystring]"
      }
    }
    if [split_querystring] == "yes" {
      kv {
        source => "[request][querystring]"
        field_split => "&?"
        target => "[request][query]"
      }
      urldecode {
        field => "[request][query]"
        all_fields => "true"
      }
      if [query_aggregate_ogc_layers] == "yes" {
        if [request][query][layers] {
          mutate {
            split => { 
              "layers" => "," 
            }
          }
        }        
        if [request][query][layer] {
          mutate {
            add_field => { "layers" => "%{layer}" }
          }
        }
      }
    }
  }  

  geoip {
    source => "[request][ip]"
    target => "[request][geoip]"
    database => "${GEOIP_DATABASE_PATH}"
    add_field => [ "[request][geoip][coordinates]", "%{[request][geoip][longitude]}" ]
    add_field => [ "[request][geoip][coordinates]", "%{[request][geoip][latitude]}"  ]
  }

  mutate {
    convert => {
      "[request][geoip][coordinates]" => "float"
    }
  }

  date {
    locale => "en"
    match => ["timestamp", "d/MMM/YYYY:HH:mm:ss Z"]
  }
}

output {
  elasticsearch {
    hosts => ["${ELASTICSEARCH_CLUSTER_HOST}:${ELASTICSEARCH_CLUSTER_PORT}"]
    index => "${ELASTICSEARCH_INDEX_NAME}-%{+YYYY.MM}"
  }
  stdout {
    codec => rubydebug
  }
}
