input {
  s3 {
    bucket => "${S3_LOG_BUCKET}"
    region => "${S3_REGION}"
    prefix => "${S3_PREFIX}"
    sincedb_path => "${SINCEDB_PATH}"
    temporary_directory => "${S3_TMP_DIRECTORY}"
    backup_to_bucket => "${S3_PROCESSED_BUCKET}"
    delete => "${S3_DELETE_AFTER_PROCESS}"
    add_field => ["split_querystring", "${LOGSTASH_SPLIT_QUERYSTRING}"]
    add_field => ["query_aggregate_ogc_layers", "${LOGSTASH_QUERY_AGGREGATE_OGC_LAYERS}"]
  }
}

filter {
  grok {
    match => { "message" => "%{ELB_ACCESS_LOG}"}
  }

  mutate {
    rename => {
      "elb" => "[request][elb][elb]"
      "clientip" => "[request][ip]"
      "clientport" => "[request][port]"
      "backend_processing_time" => "[request][elb][backend][time]"
      "request_processing_time" => "[request][time]"
      "response_processing_time" => "[response][time]"
      "response" => "[response][status]"
      "backend_response" => "[response][elb][backend][response]"
      "received_bytes" => "[request][size]"
      "bytes" => "[response][size]"
    }
  }

  if [backendip] {
    mutate {
      rename => {
        "backendip" => "[request][elb][backend][ip]"
        "backendport" => "[request][elb][backend][port]"
      }
    }
  }

  if [rawrequest] {
    
  } else { 
    mutate {
      rename => {
        "verb" => "[request][http][verb]"
        "proto" => "[request][proto]"
        "urihost" => "[request][host]"
        "path" => "[request][path]"
        "httpversion" => "[request][http][version]"    
      }
    }

    if [params] {
      mutate {
        rename => {
          "params" => "[request][querystring]"
        }
      }
    }    
  }

  if [request][querystring] {
    if [split_querystring] == "yes" {
      kv {
        source => "[request][querystring]"
        field_split => "&?"
        target => "[request][query]"
      }
      urldecode {
        field => "[request][query]"
        all_fields => "true"
      }
      if [query_aggregate_ogc_layers] == "yes" {
        if [request][query][layers] {
          mutate {
            split => { 
              "layers" => "," 
            }
          }
        }        
        if [request][query][layer] {
          mutate {
            add_field => { "layers" => "%{layer}" }
          }
        }
      }
    }
  }  

  geoip {
    source => "[request][ip]"
    target => "[request][geoip]"
    database => "${GEOIP_DATABASE_PATH}"
    add_field => [ "[request][geoip][coordinates]", "%{[request][geoip][longitude]}" ]
    add_field => [ "[request][geoip][coordinates]", "%{[request][geoip][latitude]}"  ]
  }

  mutate {
    convert => {
      "[request][geoip][coordinates]" => "float"
    }
  }

  date {
    locale => "en"
    match => ["timestamp", "d/MMM/YYYY:HH:mm:ss Z"]
  }
}

output {
  elasticsearch {
    hosts => ["${ELASTICSEARCH_CLUSTER_HOST}:${ELASTICSEARCH_CLUSTER_PORT}"]
    index => "${ELASTICSEARCH_INDEX_NAME}-%{+YYYY.MM}"
  }
  stdout {
    codec => rubydebug
  }
}


